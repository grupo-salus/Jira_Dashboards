"""
Script de teste para autentica√ß√£o LDAP - APENAS LEITURA.
Este script N√ÉO modifica, cria ou exclui dados no LDAP.
"""
import asyncio
import logging
import getpass
from services.auth_service import auth_service

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def print_header():
    """Imprime cabe√ßalho do teste."""
    print("=" * 60)
    print("üîê TESTE DE AUTENTICA√á√ÉO LDAP - SORRIDENTS")
    print("=" * 60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este teste APENAS L√ä dados do LDAP")
    print("   N√ÉO cria, modifica ou exclui nenhum dado!")
    print("=" * 60)


def test_ldap_connection():
    """Testa a conex√£o com o servidor LDAP."""
    print("\nüîç TESTE 1: Conex√£o com servidor LDAP")
    print("-" * 40)
    
    try:
        connected = auth_service._connect_ldap()
        if connected:
            print("‚úÖ Conex√£o LDAP estabelecida com sucesso!")
            print("   Servidor: 10.200.128.60:389")
            print("   Base DN: dc=sorridents,dc=br")
            return True
        else:
            print("‚ùå Falha na conex√£o LDAP")
            print("   Verifique as configura√ß√µes no arquivo .env")
            return False
    except Exception as e:
        print(f"‚ùå Erro na conex√£o LDAP: {e}")
        return False


def test_user_search(username: str):
    """Testa a busca de um usu√°rio no LDAP."""
    print(f"\nüîç TESTE 2: Busca de usu√°rio '{username}'")
    print("-" * 40)
    
    try:
        user_info = auth_service.search_user(username)
        if user_info:
            print("‚úÖ Usu√°rio encontrado no LDAP!")
            print(f"   Nome completo: {user_info.get('display_name', 'N/A')}")
            print(f"   Email: {user_info.get('email', 'N/A')}")
            print(f"   Departamento: {user_info.get('department', 'N/A')}")
            print(f"   Cargo: {user_info.get('title', 'N/A')}")
            print(f"   Telefone: {user_info.get('phone', 'N/A')}")
            print(f"   Celular: {user_info.get('mobile', 'N/A')}")
            return True
        else:
            print("‚ùå Usu√°rio n√£o encontrado no LDAP")
            print("   Verifique se o username est√° correto")
            return False
    except Exception as e:
        print(f"‚ùå Erro na busca do usu√°rio: {e}")
        return False


def test_user_authentication(username: str, password: str):
    """Testa a autentica√ß√£o de um usu√°rio."""
    print(f"\nüîê TESTE 3: Autentica√ß√£o do usu√°rio '{username}'")
    print("-" * 40)
    
    try:
        user_info = auth_service.authenticate_user(username, password)
        if user_info:
            print("‚úÖ Autentica√ß√£o bem-sucedida!")
            print(f"   Nome completo: {user_info.get('display_name', 'N/A')}")
            print(f"   Email: {user_info.get('email', 'N/A')}")
            print(f"   Departamento: {user_info.get('department', 'N/A')}")
            print(f"   Cargo: {user_info.get('title', 'N/A')}")
            print(f"   √öltimo login: {user_info.get('last_logon', 'N/A')}")
            return True
        else:
            print("‚ùå Falha na autentica√ß√£o")
            print("   Verifique se a senha est√° correta")
            return False
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {e}")
        return False


def get_user_input():
    """Obt√©m dados do usu√°rio de forma segura."""
    print("\nüìù DADOS PARA TESTE")
    print("-" * 40)
    
    # Username
    username = input("Digite seu username (sAMAccountName): ").strip()
    if not username:
        print("‚ùå Username √© obrigat√≥rio!")
        return None, None
    
    # Password (oculto)
    try:
        password = getpass.getpass("Digite sua senha: ")
        if not password:
            print("‚ùå Senha √© obrigat√≥ria!")
            return None, None
    except KeyboardInterrupt:
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return None, None
    
    return username, password


def main():
    """Fun√ß√£o principal de teste."""
    print_header()
    
    # Teste 1: Conex√£o LDAP
    ldap_ok = test_ldap_connection()
    if not ldap_ok:
        print("\n‚ùå Testes interrompidos - LDAP n√£o est√° acess√≠vel")
        print("   Verifique:")
        print("   1. Se o servidor 10.200.128.60 est√° acess√≠vel")
        print("   2. Se as credenciais no .env est√£o corretas")
        print("   3. Se a porta 389 est√° liberada")
        return
    
    # Obter dados do usu√°rio
    username, password = get_user_input()
    if not username or not password:
        return
    
    # Teste 2: Busca de usu√°rio
    search_ok = test_user_search(username)
    if not search_ok:
        print("\n‚ùå Teste de busca falhou")
        print("   Verifique se o username est√° correto")
        return
    
    # Teste 3: Autentica√ß√£o
    auth_ok = test_user_authentication(username, password)
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    print(f"   Conex√£o LDAP: {'‚úÖ OK' if ldap_ok else '‚ùå FALHOU'}")
    print(f"   Busca usu√°rio: {'‚úÖ OK' if search_ok else '‚ùå FALHOU'}")
    print(f"   Autentica√ß√£o: {'‚úÖ OK' if auth_ok else '‚ùå FALHOU'}")
    
    if ldap_ok and search_ok and auth_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("   O sistema de autentica√ß√£o LDAP est√° funcionando corretamente.")
    else:
        print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("   Verifique as configura√ß√µes e tente novamente.")
    
    print("\nüîí SEGURAN√áA CONFIRMADA:")
    print("   ‚úÖ Apenas opera√ß√µes de LEITURA foram realizadas")
    print("   ‚úÖ Nenhum dado foi modificado no LDAP")
    print("   ‚úÖ Sistema seguro para uso em produ√ß√£o")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
    finally:
        print("\nÔøΩÔøΩ Teste finalizado") 